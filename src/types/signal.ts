/**
 * @file Defines the core data structures and types used throughout the trading signal application.
 * These types ensure data consistency and provide clear contracts for how different parts of the system communicate.
 */

/**
 * Represents the possible actions for a trading signal.
 * - `BUY`: Indicates a signal to enter a long position.
 * - `SELL`: Indicates a signal to enter a short position or exit a long one.
 * - `HOLD`: Indicates no action should be taken.
 */
export type SignalType = 'BUY' | 'SELL' | 'HOLD';

/**
 * Defines the risk management parameters for a trading signal.
 * These metrics are crucial for managing potential losses and securing profits.
 */
export interface RiskMetrics {
  /** The price at which to exit a position to limit losses. */
  stopLoss: number;
  /** The price at which to exit a position to take profits. */
  takeProfit: number;
  /** The ratio of potential reward to potential risk. */
  riskRewardRatio: number;
  /** The percentage of the portfolio to allocate to this position (e.g., 2 for 2%). */
  positionSizePercent: number;
  /** The maximum percentage drawdown observed for this strategy, if available. */
  maxDrawdownPercent?: number;
}

/**
 * Represents a complete trading signal, typically generated by an LLM or other analysis.
 * This is the central data structure that drives trading decisions.
 */
export interface TradingSignal {
  /** A unique identifier for the signal. */
  id: string;
  /** The trading pair, e.g., "BTCUSDT". */
  symbol: string;
  /** The type of signal (BUY, SELL, or HOLD). */
  type: SignalType;
  /** The confidence level of the signal, from 0 to 100. */
  confidence: number;
  /** The recommended entry price for the trade. */
  price: number;
  /** The timestamp when the signal was generated (in epoch milliseconds). */
  timestamp: number;
  /** The name of the strategy that generated the signal. */
  strategy?: string;
  /** A record of technical indicators and their values at the time of signal generation. */
  indicators?: Record<string, any>;
  /** The risk management parameters for the signal. */
  riskMetrics: RiskMetrics;
  /** The exchange where the trade should be executed, e.g., "BINANCE". */
  exchange?: string;
  /** The current status of the signal. */
  status?: 'NEW' | 'PENDING' | 'CLOSED' | 'CANCELLED';
  /** The reasoning or justification behind the signal, often provided by an LLM. */
  reasoning?: string;
}

/**
 * Records the history and outcome of a trading signal after it has been acted upon.
 * This is used for performance tracking and analysis.
 */
export interface SignalHistory {
  /** A unique identifier for the history record, often matching the signal ID. */
  id: string;
  /** The original signal that was generated. */
  signal: TradingSignal;
  /** The final outcome of the trade. */
  outcome: 'WIN' | 'LOSS' | 'PENDING' | 'CANCELLED';
  /** The price at which the position was entered. */
  entryPrice: number;
  /** The price at which the position was exited, if applicable. */
  exitPrice?: number;
  /** The profit or loss from the trade in absolute terms. */
  pnl?: number;
  /** The profit or loss from the trade as a percentage. */
  pnlPercent?: number;
  /** The duration of the trade in milliseconds. */
  durationMs?: number;
  /** The timestamp when the trade was closed. */
  closedAt?: number;
  /** The reason for the trade's closure (e.g., hit take profit or stop loss). */
  hitTarget?: 'TP' | 'SL' | 'MANUAL' | null;
}
