/**
 * @file Defines the core data structures and types used throughout the trading signal application.
 */

/**
 * Represents the type of trading signal.
 * @typedef {'BUY' | 'SELL' | 'HOLD'} SignalType
 */
export type SignalType = 'BUY' | 'SELL' | 'HOLD';

/**
 * Defines the risk management parameters for a trading signal.
 * @interface RiskMetrics
 * @property {number} stopLoss - The price at which to exit a losing trade.
 * @property {number} takeProfit - The price at which to exit a winning trade.
 * @property {number} riskRewardRatio - The ratio of potential profit to potential loss.
 * @property {number} positionSizePercent - The percentage of the portfolio to allocate to the trade.
 * @property {number} [maxDrawdownPercent] - The maximum acceptable drawdown for the trade.
 */
export interface RiskMetrics {
  stopLoss: number;
  takeProfit: number;
  riskRewardRatio: number;
  positionSizePercent: number;
  maxDrawdownPercent?: number;
}

/**
 * Represents a trading signal generated by the application.
 * @interface TradingSignal
 * @property {string} id - A unique identifier for the signal.
 * @property {string} symbol - The trading symbol, e.g., 'BTC/USD'.
 * @property {SignalType} type - The type of the signal ('BUY', 'SELL', 'HOLD').
 * @property {number} confidence - The confidence level of the signal, from 0 to 100.
 * @property {number} price - The target price for the signal.
 * @property {number} timestamp - The UNIX timestamp when the signal was generated.
 * @property {string} [strategy] - The name of the strategy that generated the signal.
 * @property {Record<string, any>} [indicators] - The technical indicators used to generate the signal.
 * @property {RiskMetrics} riskMetrics - The risk management parameters for the signal.
 * @property {string} [exchange] - The exchange where the trade should be executed.
 * @property {'NEW' | 'PENDING' | 'CLOSED' | 'CANCELLED'} [status] - The current status of the signal.
 * @property {string} [reasoning] - The reasoning or justification for the signal, often from an LLM.
 */
export interface TradingSignal {
  id: string;
  symbol: string;
  type: SignalType;
  confidence: number;
  price: number;
  timestamp: number;
  strategy?: string;
  indicators?: Record<string, any>;
  riskMetrics: RiskMetrics;
  exchange?: string;
  status?: 'NEW' | 'PENDING' | 'CLOSED' | 'CANCELLED';
  reasoning?: string;
}

/**
 * Represents the historical record of a trading signal's performance.
 * @interface SignalHistory
 * @property {string} id - A unique identifier for the history record.
 * @property {TradingSignal} signal - The original trading signal.
 * @property {'WIN' | 'LOSS' | 'PENDING' | 'CANCELLED'} outcome - The outcome of the trade.
 * @property {number} entryPrice - The price at which the trade was entered.
 * @property {number} [exitPrice] - The price at which the trade was exited.
 * @property {number} [pnl] - The profit or loss from the trade.
 * @property {number} [pnlPercent] - The profit or loss as a percentage of the entry price.
 * @property {number} [durationMs] - The duration of the trade in milliseconds.
 * @property {number} [closedAt] - The UNIX timestamp when the trade was closed.
 * @property {'TP' | 'SL' | 'MANUAL' | null} [hitTarget] - Whether the trade hit the take profit, stop loss, or was manually closed.
 */
export interface SignalHistory {
  id: string;
  signal: TradingSignal;
  outcome: 'WIN' | 'LOSS' | 'PENDING' | 'CANCELLED';
  entryPrice: number;
  exitPrice?: number;
  pnl?: number;
  pnlPercent?: number;
  durationMs?: number;
  closedAt?: number;
  hitTarget?: 'TP' | 'SL' | 'MANUAL' | null;
}

/**
 * Represents the parsed response from an LLM provider.
 * @interface LLMResponseParsed
 * @property {string} providerId - The ID of the LLM provider.
 * @property {any} raw - The raw, unparsed response from the provider.
 * @property {boolean} ok - Whether the request was successful and the response was valid.
 * @property {Partial<TradingSignal> & { reasoning?: string }} [parsed] - The parsed trading signal data from the response.
 * @property {string} [error] - Any error message from the request.
 */
export interface LLMResponseParsed {
  providerId: string;
  raw: any;
  ok: boolean;
  parsed?: Partial<TradingSignal> & { reasoning?: string };
  error?: string;
}

/**
 * Represents a single candlestick in a financial chart.
 * @interface Candle
 * @property {number} t - The UNIX timestamp for the start of the candle's timeframe.
 * @property {number} open - The opening price.
 * @property {number} high - The highest price.
 * @property {number} low - The lowest price.
 * @property {number} close - The closing price.
 * @property {number} volume - The trading volume.
 */
export interface Candle {
  t: number;
  open: number;
  high: number;
  low: number;
  close: number;
  volume: number;
}

/**
 * Represents the available timeframes for market data analysis.
 * @typedef {'1m' | '5m' | '15m' | '1h' | '4h' | '1d'} Timeframe
 */
export type Timeframe = '1m' | '5m' | '15m' | '1h' | '4h' | '1d';

/**
 * Represents the analysis of a specific timeframe for a trading symbol.
 * @interface TimeframeAnalysis
 * @property {Timeframe} timeframe - The timeframe being analyzed.
 * @property {Candle} [lastCandle] - The last candlestick in the timeframe.
 * @property {'BULLISH' | 'BEARISH' | 'NEUTRAL'} trend - The current trend in the timeframe.
 * @property {number} volatility - The volatility of the market in the timeframe.
 * @property {number[]} [support] - Key support levels.
 * @property {number[]} [resistance] - Key resistance levels.
 * @property {{ avg: number; last: number }} [volumeInfo] - Information about the trading volume.
 */
export interface TimeframeAnalysis {
  timeframe: Timeframe;
  lastCandle?: Candle;
  trend: 'BULLISH' | 'BEARISH' | 'NEUTRAL';
  volatility: number;
  support?: number[];
  resistance?: number[];
  volumeInfo?: { avg: number; last: number };
}

/**
 * Represents the state of the circuit breaker for a provider.
 * @typedef {'CLOSED' | 'OPEN' | 'HALF_OPEN'} CircuitState
 */
export type CircuitState = 'CLOSED' | 'OPEN' | 'HALF_OPEN';

/**
 * Represents the health status of a provider.
 * @interface ProviderHealth
 * @property {string} providerId - The ID of the provider.
 * @property {CircuitState} state - The current state of the circuit breaker.
 * @property {number} failureCount - The number of consecutive failures.
 * @property {number} lastAttempt - The UNIX timestamp of the last attempt.
 */
export interface ProviderHealth {
  providerId: string;
  state: CircuitState;
  failureCount: number;
  lastAttempt: number; // Timestamp
}
